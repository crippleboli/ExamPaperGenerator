import requests
import json
import time

# =================配置区域========================================================
API_KEY = "sk-6e6d266f347645d7b3bcca7370cf7a85"
BASE_URL = "https://api.deepseek.com/v1"
ENDPOINT = "/chat/completions"
# 最大重试次数
MAX_RETRIES = 3

headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# 知识点库
knowledge_base = {
    "高等数学": {
        "简单": ["极限定义", "导数定义"],
        "中等": ["导数应用", "函数图像", "微分方程", "积分应用"],
        "困难": ["多元函数极值", "级数判敛", "泰勒展开应用", "曲面积分"]
    },
    "线性代数": {
        "简单": ["矩阵基本性质", "行列式", "秩"],
        "中等": ["线性方程组解的结构"],
        "困难": ["特征值与二次型综合"]
    },
    "概率统计": {
        "简单": ["古典概型", "事件关系"],
        "中等": ["随机变量分布", "期望", "方差"],
        "困难": ["统计量性质", "假设检验"]
    }
}
# ================================================================================


# =================获取示例问题、答案和解析区域===========================================
def _get_example_question(q_type):
    # 定义不同题型的示例问题
    examples = {
        "选择题": "五四运动爆发于？\n选项：\nA. 1911\nB. 1919\nC. 1921\nD. 1937",
        "填空题": "南京大屠杀发生在____年",
        "计算题": "(1) 求函数f(x)=x²的导数?\n(2) 计算x=2时的导数值"
    }
    # 根据传入的题型返回对应的示例问题，如果未找到则返回默认的示例问题
    return examples.get(q_type, "示例问题")


def _get_example_answer(q_type):
    # 定义不同题型的示例答案
    answers = {
        "选择题": "B",
        "填空题": "1937",
        "计算题": "(1) 2x\n(2) 4"
    }
    # 根据传入的题型返回对应的示例答案，如果未找到则返回默认的示例答案
    return answers.get(q_type, "示例答案")


def _get_example_analysis(q_type):
    # 定义不同题型的示例解析
    analyses = {
        "选择题": "1919年巴黎和会外交失败直接引发五四运动",
        "填空题": "根据历史事件时间线确定",
        "计算题": "使用基本导数公式计算"
    }
    # 根据传入的题型返回对应的示例解析，如果未找到则返回默认的示例解析
    return analyses.get(q_type, "示例解析")

def _get_difficulty_criteria(subject, question_type, difficulty):
    # 使用新的知识点库来生成难度标准
    criteria = knowledge_base.get(subject, {}).get(difficulty, [])
    if criteria:
        return f"涉及知识点：{', '.join(criteria)}"
    return ""
# =====================================================================================


# =================构建提示信息区域========================================================
def build_prompt(subject, difficulty, question_type, num):
    type_rules = {
        "选择题": f"""必须包含4个选项，格式示例：
                题目：[题干]（以？结尾）
                选项：
                A. [内容]
                B. [内容]
                C. [内容]
                D. [内容]
                答案：[字母]
                注意：生成的题目必须各不相同。
                难度要求：{_get_difficulty_criteria(subject, question_type, difficulty)}""",
        "填空题": (
            "必须使用下划线'_'标记填空位置，示例：\n"
            "题目：二战爆发于____年\n"
            "答案：1939\n"
            "禁止出现任何选项标识"
            f"难度要求：{_get_difficulty_criteria(subject, question_type, difficulty)}"
        ),
        "计算题": (
            "必须满足以下要求：\n"
            "1. 包含至少两个带编号的小问，格式示例：\n"
            "   (1) 第一小问...?\n"
            "   (2) 第二小问...\n"
            "2. 题干或小问必须以以下形式结尾：\n"
            "   - 以问号?结尾\n"
            "   - 包含「求...的值」\n"
            "   - 包含「证明...」\n"
            "3. 需包含完整解题过程，示例：\n"
            "题目：已知函数f(x)=x³-3x\n"
            "(1) 求f(x)的极值点?\n"
            "(2) 证明该函数在区间[-2,2]上满足罗尔定理条件\n"
            "答案：\n"
            "(1) 导数为f'(x)=3x²-3，令f'(x)=0得x=±1...\n"
            "(2) 验证连续性、可导性及端点值相等..."
            f"难度要求：{_get_difficulty_criteria(subject, question_type, difficulty)}"
        ),
    }

    return f"""【超严格指令】生成{num}道[{subject}]{question_type}（难度：{difficulty}）：
1. 返回严格JSON格式，包含question/answer/analysis
2. {type_rules.get(question_type, '')}
3. 示例：
{{
    "questions": [
        {{
            "question": "{_get_example_question(question_type)}",
            "answer": "{_get_example_answer(question_type)}",
            "analysis": "{_get_example_analysis(question_type)}"
        }}
    ]
}}"""

# =============================================================================================


# =================json清洗验证=================================================================
def clean_json_content(content):
    # 清洗json:去除多余的代码块标记和首尾空白。
    return content.replace('```json', '').replace('```', '').strip()


def validate_json(content):
    # 验证JSON完整性
    try:
        json.loads(content)
        return True
    except:
        return False
# =============================================================================================



def generate_questions(subject, difficulty, question_type, num):
    data = {
        "model": "deepseek-chat",
        "messages": [{"role": "user", "content": build_prompt(subject, difficulty, question_type, num)}],
        "stream": False,
        "temperature": 0.7,
        "max_tokens": 2000
    }

    for attempt in range(MAX_RETRIES):
        try:
            response = requests.post(
                f"{BASE_URL}{ENDPOINT}",
                headers=headers,
                json=data,
                timeout=40
            )

            if response.status_code != 200:
                print(f"[Attempt {attempt + 1}] HTTP Error {response.status_code}")
                continue

            content = response.json()['choices'][0]['message']['content']
            cleaned = clean_json_content(content)

            if not validate_json(cleaned):
                print(f"[Attempt {attempt + 1}] Invalid JSON")
                continue

            # 将验证通过的 JSON 字符串解析为 Python 对象
            result = json.loads(cleaned)

            # 无效选择题筛选   只筛选了选择题所以只有选择题有提示信息
            if question_type == "选择题":
                valid_questions = []
                for q in result.get('questions', []):
                    if 'A.' in q['question'] and 'B.' in q['question']:
                        valid_questions.append(q)
                    else:
                        print(f"过滤无效选择题：{q['question'][:50]}...")
                result['questions'] = valid_questions
                print(f"有效选择题数量：{len(valid_questions)}/{num}")

            return result

        except Exception as e:
            print(f"Error: {str(e)}")
            time.sleep(3)

    return None


# ==========测试区域=================================================================================
def save_results(data):
    try:
        with open("output.txt", "w", encoding="utf-8") as f:
            for idx, q in enumerate(data['questions'], 1):
                question = q.get('question', '题目生成失败')
                answer = q.get('answer', '无答案')
                analysis = q.get('analysis', '无解析')

                f.write(f"【第{idx}题】{question}\n")
                f.write(f"答案：{answer}\n解析：{analysis}\n\n")
        return True
    except Exception as e:
        print(f"保存失败: {str(e)}")
        return False

#  存储为txt: 测试 main.py 使用
if __name__ == "__main__":
    print("试卷生成系统启动...")
    result = generate_questions("高等数学", "中等", "选择题", 3)
    if result:
        save_results(result)
        print("保存成功")
    else:
        print("生成失败")
# =================================================================================================